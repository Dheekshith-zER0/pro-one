import streamlit as st
import re
import random

# --- Helper function to get translation based on session state ---
def get_translation_data():
    """Returns the current translation dictionary (t) and the full language map."""
    
    # ------------------ Translation Dictionary ------------------
    # Define the dictionary entirely first
    translations = {
        "en": {
            "page_title": "Phishing & URL Checker",
            "email_checker": "Email Checker",
            "url_checker": "URL Checker",
            "email_title": "AI Gmail Phishing Detector",
            "email_desc": "Paste the content of a suspicious email below to analyze it for phishing indicators, including sender verification and phone number requests. Include the 'From:' field if possible for better accuracy.",
            "email_input": "Email Content",
            "email_placeholder": "Paste the full content of the email, including sender details (e.g., From: example@gmail.com)...",
            "analyze_button": "Analyze for Phishing",
            "no_content_warning": "Please paste some email content to analyze.",
            "analysis_results": "Analysis Results",
            "phishing_score": "Phishing Score",
            "detected_sender": "Detected Sender",
            "indicators": "Detected Phishing Indicators:",
            "no_indicators": "No obvious phishing indicators detected. This email appears safe.",
            "safe_sender": "Sender appears to be a legitimate address with no suspicious verification requests detected.",
            "footer": "Prototype built with Streamlit. For educational/demo purposes only. Always verify suspicious emails manually.",
            "url_title": "URL Phishing Checker",
            "url_desc": "Paste a URL below to check for phishing risks. This is a simple prototype.",
            "url_input": "Enter URL",
            "url_placeholder": "e.g., https://login.bankofamerica.com.xyz",
            "check_button": "Check URL",
            "url_warning": "Please enter a URL to check.",
            "keyword_detected": "üö© Suspicious Keyword Detected in URL: This URL contains a sensitive keyword like 'login' or 'bank'.",
            "tld_detected": "üö© Suspicious Top-Level Domain Detected:",
            "heuristics_warning": "‚ö† This URL is flagged by our basic heuristics. Please proceed with caution.",
            "url_safe": "‚úÖ The URL appears to be safe to visit!",
            "url_suspicious": "üö® This URL is highly suspicious ‚Äì possible phishing detected!",
            "sender_not_found": "Not Found",
            "sender_placeholder": "Not Found",
            "welcome_title": "Welcome to Phishing & URL Checker", 
            "select_lang": "Please select your preferred language to continue:", 
            "confirm_lang": "Continue to App", 
            "nav_title": "Navigation", 
            "theme_title": "Theme", # New translation key
            "light_mode": "Light Mode üí°", # New translation key
            "dark_mode": "Dark Mode üåô", # New translation key
        },
        "hi": {  # Hindi
            "page_title": "‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§ö‡•á‡§ï‡§∞",
            "email_checker": "‡§à‡§Æ‡•á‡§≤ ‡§ö‡•á‡§ï‡§∞",
            "url_checker": "‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§ö‡•á‡§ï‡§∞",
            "email_title": "‡§è‡§Ü‡§à ‡§ú‡•Ä‡§Æ‡•á‡§≤ ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§ü‡§∞",
            "email_desc": "‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§à‡§Æ‡•á‡§≤ ‡§ï‡•Ä ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§®‡•Ä‡§ö‡•á ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á‡•§ ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è 'From:' ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§",
            "email_input": "‡§à‡§Æ‡•á‡§≤ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä",
            "email_placeholder": "‡§à‡§Æ‡•á‡§≤ ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç, ‡§™‡•ç‡§∞‡•á‡§∑‡§ï ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç (‡§â‡§¶‡§æ: From: example@gmail.com)...",
            "analyze_button": "‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",
            "no_content_warning": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§õ ‡§à‡§Æ‡•á‡§≤ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§",
            "analysis_results": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
            "phishing_score": "‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§∏‡•ç‡§ï‡•ã‡§∞",
            "detected_sender": "‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§™‡•ç‡§∞‡•á‡§∑‡§ï",
            "indicators": "‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§è ‡§ó‡§è ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï:",
            "no_indicators": "‡§ï‡•ã‡§à ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡•§ ‡§Ø‡§π ‡§à‡§Æ‡•á‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡•ç‡§∞‡§§‡•Ä‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
            "safe_sender": "‡§™‡•ç‡§∞‡•á‡§∑‡§ï ‡§è‡§ï ‡§µ‡•à‡§ß ‡§™‡§§‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
            "footer": "‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ‡§≤‡§ø‡§ü ‡§ï‡•á ‡§∏‡§æ‡§• ‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§ ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ü‡§æ‡§á‡§™‡•§ ‡§ï‡•á‡§µ‡§≤ ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï/‡§°‡•á‡§Æ‡•ã ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            "url_title": "‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§ö‡•á‡§ï‡§∞",
            "url_desc": "‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§è‡§ï ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ø‡§π ‡§è‡§ï ‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ü‡§æ‡§á‡§™ ‡§π‡•à‡•§",
            "url_input": "‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
            "url_placeholder": "‡§â‡§¶‡§æ: https://login.bankofamerica.com.xyz",
            "check_button": "‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
            "url_warning": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§æ‡§Ç‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
            "keyword_detected": "üö© ‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§™‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ: ‡§á‡§∏ ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§Æ‡•á‡§Ç 'login' ‡§Ø‡§æ 'bank' ‡§ú‡•à‡§∏‡•á ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§∂‡§¨‡•ç‡§¶ ‡§π‡•à‡§Ç‡•§",
            "tld_detected": "üö© ‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§∂‡•Ä‡§∞‡•ç‡§∑-‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§°‡•ã‡§Æ‡•á‡§® ‡§™‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ:",
            "heuristics_warning": "‚ö† ‡§á‡§∏ ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§ï‡•ã ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§∞‡§≤ ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä ‡§∏‡•á ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç‡•§",
            "url_safe": "‚úÖ ‡§Ø‡§π ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡•ç‡§∞‡§§‡•Ä‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à!",
            "url_suspicious": "üö® ‡§Ø‡§π ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§π‡•à - ‡§∏‡§Ç‡§≠‡§µ‡§§‡§É ‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó!",
            "sender_not_found": "‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ",
            "sender_placeholder": "‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ",
            "welcome_title": "‡§´‡§º‡§ø‡§∂‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§ö‡•á‡§ï‡§∞ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à", 
            "select_lang": "‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:", 
            "confirm_lang": "‡§ê‡§™ ‡§™‡§∞ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç", 
            "nav_title": "‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§®",
            "theme_title": "‡§•‡•Ä‡§Æ", # New translation key
            "light_mode": "‡§≤‡§æ‡§á‡§ü ‡§Æ‡•ã‡§° üí°", # New translation key
            "dark_mode": "‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§° üåô", # New translation key
        },

        "te": {
            "page_title": "‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç & URL ‡∞ö‡±Ü‡∞ï‡∞∞‡±ç",
            "email_checker": "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞ö‡±Ü‡∞ï‡∞∞‡±ç",
            "url_checker": "URL ‡∞ö‡±Ü‡∞ï‡∞∞‡±ç",
            "email_title": "AI Gmail ‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞°‡∞ø‡∞ü‡±Ü‡∞ï‡±ç‡∞ü‡∞∞‡±ç",
            "email_desc": "‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∏‡±Ç‡∞ö‡∞ø‡∞ï‡∞≤‡∞®‡±Å ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Ö‡∞®‡±Å‡∞Æ‡∞æ‡∞®‡∞æ‡∞∏‡±ç‡∞™‡∞¶ ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ ‡∞™‡±á‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞§‡±ç‡∞µ‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç 'From:' ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç‚Äå‡∞®‡±Å ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø.",
            "email_input": "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç",
            "email_placeholder": "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞™‡±á‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø, ‡∞™‡∞Ç‡∞™‡∞ø‡∞®‡∞µ‡∞æ‡∞∞‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø (‡∞â‡∞¶‡∞æ: From: example@gmail.com)...",
            "analyze_button": "‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
            "no_content_warning": "‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡±ä‡∞Ç‡∞§ ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞™‡±á‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
            "analysis_results": "‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£ ‡∞´‡∞≤‡∞ø‡∞§‡∞æ‡∞≤‡±Å",
            "phishing_score": "‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∏‡±ç‡∞ï‡±ã‡∞∞‡±ç",
            "detected_sender": "‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡∞Ç‡∞™‡∞ø‡∞®‡∞µ‡∞æ‡∞°‡±Å",
            "indicators": "‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∏‡±Ç‡∞ö‡∞ø‡∞ï‡∞≤‡±Å:",
            "no_indicators": "‡∞è ‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∏‡±Ç‡∞ö‡∞ø‡∞ï‡∞≤‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å. ‡∞à ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø.",
            "safe_sender": "‡∞™‡∞Ç‡∞™‡∞ø‡∞®‡∞µ‡∞æ‡∞∞‡±Å ‡∞∏‡∞∞‡±à‡∞® ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞â‡∞®‡±ç‡∞®‡∞ü‡±ç‡∞≤‡±Å ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞Ö‡∞®‡±Å‡∞Æ‡∞æ‡∞®‡∞æ‡∞∏‡±ç‡∞™‡∞¶ ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞£ ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å.",
            "footer": "‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡±Ä‡∞Ç‡∞≤‡∞ø‡∞ü‡±ç‚Äå‡∞§‡±ã ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡±ç‡∞∞‡±ã‡∞ü‡±ã‡∞ü‡±à‡∞™‡±ç. ‡∞á‡∞¶‡∞ø ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ/‡∞°‡±Ü‡∞Æ‡±ã ‡∞™‡±ç‡∞∞‡∞Ø‡±ã‡∞ú‡∞®‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á. ‡∞Ö‡∞®‡±Å‡∞Æ‡∞æ‡∞®‡∞æ‡∞∏‡±ç‡∞™‡∞¶ ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç‡∞∏‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞≤‡±ç‡∞≤‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞ö‡±á‡∞§‡∞ø‡∞§‡±ã ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
            "url_title": "URL ‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ö‡±Ü‡∞ï‡∞∞‡±ç",
            "url_desc": "‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞æ‡∞≤‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ URL ‡∞™‡±á‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞á‡∞¶‡∞ø ‡∞í‡∞ï ‡∞∏‡∞∞‡∞≥‡∞Æ‡±à‡∞® ‡∞™‡±ç‡∞∞‡±ã‡∞ü‡±ã‡∞ü‡±à‡∞™‡±ç.",
            "url_input": "URL ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
            "url_placeholder": "‡∞â‡∞¶‡∞æ: https://login.bankofamerica.com.xyz",
            "check_button": "URL ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
            "url_warning": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞í‡∞ï URL ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
            "keyword_detected": "üö© ‡∞Ö‡∞®‡±Å‡∞Æ‡∞æ‡∞®‡∞æ‡∞∏‡±ç‡∞™‡∞¶ ‡∞ï‡±Ä‡∞µ‡∞∞‡±ç‡∞°‡±ç ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø: ‡∞à URL‡∞≤‡±ã 'login' ‡∞≤‡±á‡∞¶‡∞æ 'bank' ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞∏‡±Å‡∞®‡±ç‡∞®‡∞ø‡∞§‡∞Æ‡±à‡∞® ‡∞™‡∞¶‡∞Ç ‡∞â‡∞Ç‡∞¶‡∞ø.",
            "tld_detected": "üö© ‡∞Ö‡∞®‡±Å‡∞Æ‡∞æ‡∞®‡∞æ‡∞∏‡±ç‡∞™‡∞¶ ‡∞ü‡∞æ‡∞™‡±ç-‡∞≤‡±Ü‡∞µ‡∞≤‡±ç ‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø:",
            "heuristics_warning": "‚ö† ‡∞à URL ‡∞Æ‡∞æ ‡∞™‡±ç‡∞∞‡∞æ‡∞•‡∞Æ‡∞ø‡∞ï ‡∞π‡±ç‡∞Ø‡±Ç‡∞∞‡∞ø‡∞∏‡±ç‡∞ü‡∞ø‡∞ï‡±ç‡∞∏‡±ç ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ ‡∞´‡±ç‡∞≤‡∞æ‡∞ó‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞ó‡∞æ ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞Ç‡∞°‡∞ø.",
            "url_safe": "‚úÖ ‡∞à URL ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø!",
            "url_suspicious": "üö® ‡∞à URL ‡∞Ö‡∞®‡±Å‡∞Æ‡∞æ‡∞®‡∞æ‡∞∏‡±ç‡∞™‡∞¶‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø ‚Äì ‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ï‡∞æ‡∞µ‡∞ö‡±ç‡∞ö‡±Å!",
            "sender_not_found": "‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å",
            "sender_placeholder": "‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å",
            "welcome_title": "‡∞´‡∞ø‡∞∑‡∞ø‡∞Ç‡∞ó‡±ç & URL ‡∞ö‡±Ü‡∞ï‡∞∞‡±ç‚Äå‡∞ï‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç",
            "select_lang": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞á‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
            "confirm_lang": "‡∞Ø‡∞æ‡∞™‡±ç ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
            "nav_title": "‡∞®‡∞æ‡∞µ‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç",
            "theme_title": "‡∞•‡±Ä‡∞Æ‡±ç", # New translation key
            "light_mode": "‡∞≤‡±à‡∞ü‡±ç ‡∞Æ‡±ã‡∞°‡±ç üí°", # New translation key
            "dark_mode": "‡∞°‡∞æ‡∞∞‡±ç‡∞ï‡±ç ‡∞Æ‡±ã‡∞°‡±ç üåô", # New translation key
        }, 
        "bn": {
            "page_title": "‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶ì ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞",
            "email_checker": "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞",
            "url_checker": "‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞",
            "email_title": "‡¶è‡¶Ü‡¶á ‡¶ú‡¶ø‡¶Æ‡ßá‡¶á‡¶≤ ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü‡¶∞",
            "email_desc": "‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶∏‡ßÇ‡¶ö‡¶ï ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶Ü‡¶∞‡¶ì ‡¶∏‡¶†‡¶ø‡¶ï‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 'From:' ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡¶ü‡¶ø ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            "email_input": "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ",
            "email_placeholder": "‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: From: example@gmail.com)...",
            "analyze_button": "‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
            "no_content_warning": "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            "analysis_results": "‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤",
            "phishing_score": "‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ï‡ßã‡¶∞",
            "detected_sender": "‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡ßÉ‡¶§ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï",
            "indicators": "‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡ßÉ‡¶§ ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶∏‡ßÇ‡¶ö‡¶ï:",
            "no_indicators": "‡¶ï‡ßã‡¶®‡¶ì ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶∏‡ßÇ‡¶ö‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶¨‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§",
            "safe_sender": "‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶¨‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶ï‡ßã‡¶®‡¶ì ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶®‡ßá‡¶á‡•§",
            "footer": "‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶≤‡¶ø‡¶ü ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßã‡¶ü‡¶æ‡¶á‡¶™‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ/‡¶°‡ßá‡¶Æ‡ßã ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø‡ßá‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            "url_title": "‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞",
            "url_desc": "‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßã‡¶ü‡¶æ‡¶á‡¶™‡•§",
            "url_input": "‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
            "url_placeholder": "‡¶Ø‡ßá‡¶Æ‡¶®: https://login.bankofamerica.com.xyz",
            "check_button": "‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®",
            "url_warning": "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
            "keyword_detected": "üö© ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ‡¶è‡¶á ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤‡ßá 'login' ‡¶¨‡¶æ 'bank' ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
            "tld_detected": "üö© ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶ü‡¶™-‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:",
            "heuristics_warning": "‚ö† ‡¶è‡¶á ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶π‡¶ø‡¶â‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®‡•§",
            "url_safe": "‚úÖ ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶¨‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá!",
            "url_suspicious": "üö® ‡¶è‡¶á ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‚Äì ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç!",
            "sender_not_found": "‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø",
            "sender_placeholder": "‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø",
            "welcome_title": "‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶ì ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ",
            "select_lang": "‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            "confirm_lang": "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®",
            "nav_title": "‡¶®‡ßç‡¶Ø‡¶æ‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶®",
            "theme_title": "‡¶•‡¶ø‡¶Æ", # New translation key
            "light_mode": "‡¶≤‡¶æ‡¶á‡¶ü ‡¶Æ‡ßã‡¶° üí°", # New translation key
            "dark_mode": "‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶° üåô", # New translation key
        }, 
        "ur": {
            "page_title": "ŸÅÿ¥ŸÜ⁄Ø ÿßŸàÿ± €åŸà ÿ¢ÿ± ÿß€åŸÑ ⁄Ü€å⁄©ÿ±",
            "email_checker": "ÿß€å ŸÖ€åŸÑ ⁄Ü€å⁄©ÿ±",
            "url_checker": "€åŸà ÿ¢ÿ± ÿß€åŸÑ ⁄Ü€å⁄©ÿ±",
            "email_title": "ÿß€í ÿ¢ÿ¶€å ÿ¨€å ŸÖ€åŸÑ ŸÅÿ¥ŸÜ⁄Ø ⁄à€åŸπ€å⁄©Ÿπÿ±",
            "email_desc": "ŸÅÿ¥ŸÜ⁄Ø ⁄©€í ÿßÿ¥ÿßÿ±€í ÿ™ÿ¨ÿ≤€å€Å ⁄©ÿ±ŸÜ€í ⁄©€í ŸÑ€å€í ŸÜ€å⁄Ü€í ŸÖÿ¥ÿ™ÿ®€Å ÿß€å ŸÖ€åŸÑ ⁄©ÿß ŸÖŸàÿßÿØ Ÿæ€åÿ≥Ÿπ ⁄©ÿ±€å⁄∫€î ÿ®€Åÿ™ÿ± ÿØÿ±ÿ≥ÿ™⁄Ø€å ⁄©€í ŸÑ€å€í 'From:' ŸÅ€åŸÑ⁄à ÿ¥ÿßŸÖŸÑ ⁄©ÿ±€å⁄∫€î",
            "email_input": "ÿß€å ŸÖ€åŸÑ ŸÖŸàÿßÿØ",
            "email_placeholder": "ÿß€å ŸÖ€åŸÑ ⁄©ÿß ŸÖ⁄©ŸÖŸÑ ŸÖŸàÿßÿØ Ÿæ€åÿ≥Ÿπ ⁄©ÿ±€å⁄∫ÿå ÿ®⁄æ€åÿ¨ŸÜ€í ŸàÿßŸÑ€í ⁄©€å ÿ™ŸÅÿµ€åŸÑÿßÿ™ ÿ¥ÿßŸÖŸÑ ⁄©ÿ±€å⁄∫ (ŸÖÿ´ÿßŸÑ: From: example@gmail.com)...",
            "analyze_button": "ŸÅÿ¥ŸÜ⁄Ø ⁄©€í ŸÑ€å€í ÿ™ÿ¨ÿ≤€å€Å ⁄©ÿ±€å⁄∫",
            "no_content_warning": "ÿ™ÿ¨ÿ≤€å€Å ⁄©ÿ±ŸÜ€í ⁄©€í ŸÑ€å€í ⁄©⁄Ü⁄æ ÿß€å ŸÖ€åŸÑ ŸÖŸàÿßÿØ Ÿæ€åÿ≥Ÿπ ⁄©ÿ±€å⁄∫€î",
            "analysis_results": "ÿ™ÿ¨ÿ≤€åÿßÿ™€å ŸÜÿ™ÿßÿ¶ÿ¨",
            "phishing_score": "ŸÅÿ¥ŸÜ⁄Ø ÿ≥⁄©Ÿàÿ±",
            "detected_sender": "Ÿæ€Å⁄ÜÿßŸÜŸÜ€í ŸàÿßŸÑÿß ÿ®⁄æ€åÿ¨ŸÜ€í ŸàÿßŸÑÿß",
            "indicators": "Ÿæ€Å⁄ÜÿßŸÜ€í ⁄Øÿ¶€í ŸÅÿ¥ŸÜ⁄Ø ÿßÿ¥ÿßÿ±€í:",
            "no_indicators": "⁄©Ÿàÿ¶€å Ÿàÿßÿ∂ÿ≠ ŸÅÿ¥ŸÜ⁄Ø ÿßÿ¥ÿßÿ±€í ŸÜ€Å€å⁄∫ ŸÖŸÑ€í€î €å€Å ÿß€å ŸÖ€åŸÑ ŸÖÿ≠ŸÅŸàÿ∏ ŸÑ⁄Øÿ™€å €Å€í€î",
            "safe_sender": "ÿ®⁄æ€åÿ¨ŸÜ€í ŸàÿßŸÑÿß ÿß€å⁄© ÿ¨ÿßÿ¶ÿ≤ Ÿæÿ™€Å ŸÑ⁄Øÿ™ÿß €Å€íÿå ⁄©Ÿàÿ¶€å ŸÖÿ¥ÿ™ÿ®€Å ÿ™ÿµÿØ€åŸÇ€å ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ŸÜ€Å€å⁄∫€î",
            "footer": "ÿßÿ≥Ÿπÿ±€åŸÖŸÑŸπ ⁄©€í ÿ≥ÿßÿ™⁄æ ÿ®ŸÜÿß€åÿß ⁄Ø€åÿß Ÿæÿ±ŸàŸπŸàŸπÿßÿ¶Ÿæ€î ÿµÿ±ŸÅ ÿ™ÿπŸÑ€åŸÖ€å/⁄à€åŸÖŸà ŸÖŸÇÿßÿµÿØ ⁄©€í ŸÑ€å€í€î ŸÖÿ¥ÿ™ÿ®€Å ÿß€å ŸÖ€åŸÑÿ≤ €ÅŸÖ€åÿ¥€Å ÿØÿ≥ÿ™€å ÿ∑Ÿàÿ± Ÿæÿ± ÿ™ÿµÿØ€åŸÇ ⁄©ÿ±€å⁄∫€î",
            "url_title": "€åŸà ÿ¢ÿ± ÿß€åŸÑ ŸÅÿ¥ŸÜ⁄Ø ⁄Ü€å⁄©ÿ±",
            "url_desc": "ŸÅÿ¥ŸÜ⁄Ø ⁄©€í ÿÆÿ∑ÿ±ÿßÿ™ ⁄Ü€å⁄© ⁄©ÿ±ŸÜ€í ⁄©€í ŸÑ€å€í ŸÜ€å⁄Ü€í ÿß€å⁄© €åŸà ÿ¢ÿ± ÿß€åŸÑ Ÿæ€åÿ≥Ÿπ ⁄©ÿ±€å⁄∫€î €å€Å ÿß€å⁄© ÿ≥ÿßÿØ€Å Ÿæÿ±ŸàŸπŸàŸπÿßÿ¶Ÿæ €Å€í€î",
            "url_input": "€åŸà ÿ¢ÿ± ÿß€åŸÑ ÿØÿ±ÿ¨ ⁄©ÿ±€å⁄∫",
            "url_placeholder": "ŸÖÿ´ÿßŸÑ: https://login.bankofamerica.com.xyz",
            "check_button": "€åŸà ÿ¢ÿ± ÿß€åŸÑ ⁄Ü€å⁄© ⁄©ÿ±€å⁄∫",
            "url_warning": "ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ⁄Ü€å⁄© ⁄©ÿ±ŸÜ€í ⁄©€í ŸÑ€å€í ÿß€å⁄© €åŸà ÿ¢ÿ± ÿß€åŸÑ ÿØÿ±ÿ¨ ⁄©ÿ±€å⁄∫€î",
            "keyword_detected": "üö© ŸÖÿ¥ÿ™ÿ®€Å ⁄©ŸÑ€åÿØ€å ŸÑŸÅÿ∏ Ÿæÿß€åÿß ⁄Ø€åÿß: ÿßÿ≥ €åŸà ÿ¢ÿ± ÿß€åŸÑ ŸÖ€å⁄∫ 'login' €åÿß 'bank' ÿ¨€åÿ≥€í ÿ≠ÿ≥ÿßÿ≥ ÿßŸÑŸÅÿßÿ∏ €Å€å⁄∫€î",
            "tld_detected": "üö© ŸÖÿ¥ÿ™ÿ®€Å ŸπÿßŸæ-ŸÑ€åŸàŸÑ ⁄àŸàŸÖ€åŸÜ Ÿæÿß€åÿß ⁄Ø€åÿß:",
            "heuristics_warning": "‚ö† €å€Å €åŸà ÿ¢ÿ± ÿß€åŸÑ €ÅŸÖÿßÿ±€å ÿ®ŸÜ€åÿßÿØ€å €ÅŸàÿ±ÿ≥Ÿπ⁄©ÿ≥ ⁄©€í ÿ™ÿ≠ÿ™ ŸÅŸÑ€å⁄Ø ⁄©€åÿß ⁄Ø€åÿß €Å€í€î ÿßÿ≠ÿ™€åÿßÿ∑ ÿ≥€í ÿ¢⁄Ø€í ÿ®⁄ë⁄æ€å⁄∫€î",
            "url_safe": "‚úÖ €å€Å €åŸà ÿ¢ÿ± ÿß€åŸÑ ŸÖÿ≠ŸÅŸàÿ∏ ŸÑ⁄Øÿ™ÿß €Å€í!",
            "url_suspicious": "üö® €å€Å €åŸà ÿ¢ÿ± ÿß€åŸÑ ÿßŸÜÿ™€Åÿßÿ¶€å ŸÖÿ¥ÿ™ÿ®€Å €Å€í ‚Äì ŸÖŸÖ⁄©ŸÜ€Å ŸÅÿ¥ŸÜ⁄Ø!",
            "sender_not_found": "ŸÜ€Å€å⁄∫ ŸÖŸÑÿß",
            "sender_placeholder": "ŸÜ€Å€å⁄∫ ŸÖŸÑÿß",
            "welcome_title": "ŸÅÿ¥ŸÜ⁄Ø ÿßŸàÿ± €åŸà ÿ¢ÿ± ÿß€åŸÑ ⁄Ü€å⁄©ÿ± ŸÖ€å⁄∫ ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ",
            "select_lang": "ÿ¨ÿßÿ±€å ÿ±⁄©⁄æŸÜ€í ⁄©€í ŸÑ€å€í ÿßŸæŸÜ€å Ÿæÿ≥ŸÜÿØ€åÿØ€Å ÿ≤ÿ®ÿßŸÜ ŸÖŸÜÿ™ÿÆÿ® ⁄©ÿ±€å⁄∫:",
            "confirm_lang": "ÿß€åŸæ Ÿæÿ± ÿ¨ÿßÿ±€å ÿ±⁄©⁄æ€å⁄∫",
            "nav_title": "ŸÜ€åŸà€å⁄Ø€åÿ¥ŸÜ",
            "theme_title": "ÿ™⁄æ€åŸÖ", # New translation key
            "light_mode": "ŸÑÿßÿ¶Ÿπ ŸÖŸà⁄à üí°", # New translation key
            "dark_mode": "⁄àÿßÿ±⁄© ŸÖŸà⁄à üåô", # New translation key
        }, 
    }

    lang_map = {
        "English (‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä)": "en", 
        "Hindi (‡§π‡§ø‡§®‡•ç‡§¶‡•Ä)": "hi", 
        "Telugu (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å)": "te", 
        "Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)": "bn", 
        "Urdu (ÿßÿ±ÿØŸà)": "ur"

    }

    # Initialize state if not present
    if 'lang_code' not in st.session_state:
        st.session_state.lang_code = None 
    if 'theme' not in st.session_state: # Initialize theme
        st.session_state.theme = 'dark' # Default theme
        
    # Get translation dictionary (t)
    lang_code = st.session_state.lang_code if st.session_state.lang_code else 'en'
    t = translations.get(lang_code, translations["en"])
    
    return t, lang_map, translations

# --- Analysis Logic (Simplified) ---
def analyze_email(content, t_dict):
    sender_email = t_dict["sender_placeholder"]
    from_match = re.search(r'From:\s*<?([^>]+@[^>\s]+)>?', content, re.IGNORECASE)
    if from_match:
        sender_email = from_match.group(1).strip().lower()

    phishing_indicators = []
    score = 0
    if sender_email != t_dict["sender_placeholder"] and not sender_email.endswith('@gmail.com'):
        phishing_indicators.append({'type': 'Suspicious Sender', 'message': 'Non-Gmail sender.', 'severity': 'high'})
        score += 40
    if re.search(r'(urgent|act now)', content, re.IGNORECASE):
        phishing_indicators.append({'type': 'Urgency/Threat', 'message': 'Uses urgent language.', 'severity': 'medium'})
        score += 20
        
    final_score = min(100, score + random.randint(0, 5))
    return sender_email, phishing_indicators, final_score

# --- App UI Functions ---

def email_checker(t):
    st.title(f"{t['email_title']}")
    st.markdown(t["email_desc"])
    
    email_content = st.text_area(t["email_input"], placeholder=t["email_placeholder"], height=200)

    if st.button(t["analyze_button"], type="primary"):
        if not email_content.strip():
            st.warning(t["no_content_warning"])
            return

        sender_email, indicators, score = analyze_email(email_content, t)

        st.subheader(t["analysis_results"])
        col1, col3 = st.columns([1, 1])
        with col1:
            st.metric(t["phishing_score"], f"{score}/100")
        with col3:
            st.metric(t["detected_sender"], sender_email)

        st.markdown("---")
        
        if not indicators:
            st.success(t["no_indicators"])
            
    st.markdown("---")
    st.markdown(t["footer"])
    
def url_checker(t):
    st.title(f" {t['url_title']}")
    st.markdown(t["url_desc"])
    
    url_input = st.text_input(t["url_input"], placeholder=t["url_placeholder"])
    if st.button(t["check_button"], type="primary"):
        if not url_input.strip():
            st.warning(t["url_warning"])
            return

        is_phishy = False
        url_lower = url_input.lower()
        suspicious_keywords = ['login', 'bank', 'paypal']

        if any(keyword in url_lower for keyword in suspicious_keywords):
            is_phishy = True
            st.error(t["keyword_detected"])
            
        if not is_phishy:
            st.success(t["url_safe"])
        else:
            st.error(t["url_suspicious"])
    
    st.markdown("---")
    st.markdown(t["footer"])

# --- Theme CSS Injection ---
def set_custom_theme():
    """Injects custom CSS based on the theme selected in session_state."""
    if st.session_state.theme == 'light':
        # Custom Light Theme (Overrides Streamlit's default dark mode if it was selected)
        # Using a simple light theme by setting the main background and text colors
        css = """
        <style>
            .stApp {
                background-color: white; 
                color: black;
            }
            /* Adjust sidebar for light mode if needed */
            .stSidebar {
                background-color: #f0f2f6; 
            }
            /* Adjust headers for better contrast */
            h1, h2, h3, h4 {
                color: #262730;
            }
        </style>
        """
        st.markdown(css, unsafe_allow_html=True)
    elif st.session_state.theme == 'dark':
        # Custom Dark Theme (Uses Streamlit's default dark mode colors as a base, 
        # but you can override specific elements if needed)
        # In the absence of a direct Streamlit theme toggle, 
        # using a general dark mode style is the only way to ensure consistency.
        css = """
        <style>
            .stApp {
                background-color: #0E1117;
                color: white;
            }
            .stSidebar {
                background-color: #1A1D23;
            }
            h1, h2, h3, h4 {
                color: #FAFAFA;
            }
        </style>
        """
        st.markdown(css, unsafe_allow_html=True)
        
def toggle_theme():
    """Switches the theme between light and dark."""
    if st.session_state.theme == 'dark':
        st.session_state.theme = 'light'
    else:
        st.session_state.theme = 'dark'


# --- Main Application Flow ---

t, lang_map, translations_all = get_translation_data()

# Inject the custom theme CSS BEFORE any other Streamlit component
set_custom_theme()

# Page configuration
st.set_page_config(
    page_title=t["page_title"],
    page_icon="üîç",
    layout="wide"
)

# 1. LANDING PAGE: FORCE LANGUAGE SELECTION
if st.session_state.lang_code is None:
    # Center the content using columns
    col_l, col_c, col_r = st.columns([1, 2, 1])

    with col_c:
        # Use the initial English translation for the welcome screen to ensure consistency
        st.title(translations_all["en"]["welcome_title"])
        st.markdown("---")
        
        st.subheader(" Please select your language / ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:")
        
        # Selectbox for the initial choice
        selected_lang_name = st.selectbox(
            "Select Language", 
            list(lang_map.keys()),
            key='initial_language_select',
            label_visibility="collapsed"
        )
        
        # Callback to set the state and rerun the script
        def set_language():
            st.session_state.lang_code = lang_map[st.session_state.initial_language_select]
            
        # Get the confirmation text based on the selected language's code for a translated button
        confirm_code = lang_map.get(st.session_state.get('initial_language_select'), 'en')
        confirm_text = translations_all.get(confirm_code, translations_all['en'])['confirm_lang']
        
        st.markdown("\n\n") 
        if st.button(confirm_text, on_click=set_language, type="primary"):
            pass

else:
    # 2. MAIN APP: LANGUAGE AND THEME IS SET
    
    # --- Sidebar Theme Switcher ---
    st.sidebar.title(t["nav_title"])

    # Theme Switcher Logic
    st.sidebar.subheader(t["theme_title"])
    
    # The current label for the button will be the opposite of the current theme
    if st.session_state.theme == 'dark':
        button_label = t["light_mode"]
    else:
        button_label = t["dark_mode"]
        
    st.sidebar.button(
        button_label, 
        on_click=toggle_theme, 
        key='theme_toggle_button'
    )
    
    st.sidebar.markdown("---")

    # --- Sidebar Navigation (Permanent Language Switcher) ---
    
    # Function to update language from the sidebar
    def update_language_from_sidebar():
        st.session_state.lang_code = lang_map[st.session_state.sidebar_language_select]

    # Find current language index for the selectbox default value
    current_lang_name = next(name for name, code in lang_map.items() if code == st.session_state.lang_code)
    current_lang_index = list(lang_map.keys()).index(current_lang_name)
    
    # Language Switcher
    st.sidebar.selectbox(
        " Language / ‡¶≠‡¶æ‡¶∑‡¶æ",
        list(lang_map.keys()),
        index=current_lang_index,
        key='sidebar_language_select',
        on_change=update_language_from_sidebar
    )
    
    st.sidebar.markdown("---")
    
    # Navigation Radio Buttons
    page = st.sidebar.radio("Go to", [t["email_checker"], t["url_checker"]])

    # --- Content Area ---
    if page == t["email_checker"]:
        email_checker(t)
    else:
        url_checker(t)
